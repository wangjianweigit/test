<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tk.pvtp.stationed.dao.PvtpStationedDao">
	<sql id="i_colum">
		id,
		user_code,
		user_number,
		user_name,
		user_pwd,
		create_user_id,
		to_char(create_date,'yyyy-mm-dd hh24:mi:ss') create_date,
		state,
		approval_user_id,
		(select user_realname from tbl_sys_user_info where id = approval_user_id) approval_user_name,
		to_char(approval_date,'yyyy-mm-dd hh24:mi:ss') approval_date,
		business_licence_imgurl,
		user_create_ip,
		company_type,
		company_name,
		registration_number,
		registration_capital,
		legal_personality,
		legal_personality_id_number,
		to_char(established_date,'yyyy-mm-dd') established_date,
		to_char(business_start_date,'yyyy-mm-dd') business_start_date,
		to_char(business_end_date,'yyyy-mm-dd') business_end_date,
		business_scope,
		registration_office,
		to_char(registration_date,'yyyy-mm-dd') registration_date,
		contacts,
		contact_phone_number,
		month_statement,
		supplier_statement,
		nvl(service_charges,0)*100 service_charges,
		nvl(member_service_rate,0)*100 member_service_rate,
		nvl(pay_service_rate,0)*100 pay_service_rate,
		nvl(area_service_rate,0)*100 area_service_rate,
		stationed_user_type,
		address_province,
		address_city,
		address_county,
		address,
		distribution_period,
		is_open_shop,
		is_approval_order
	</sql>
	<!-- 查询私有平台商家列表 -->
	<select id="queryPvtpStationedList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		select * from
		(select a.*, rownum rn from
		(select <include refid="i_colum"/>
		,(select to_char(wm_concat(case when  merchants_type = 1 then '入驻商' when merchants_type = 2 then '供应商' when merchants_type = 3 then '云仓货主' else '私有平台商家' end)) from tbl_merchants_type mt where mt.stationed_user_id = sui.id) as merchants_type
		,(select to_char(wm_concat(merchants_type)) from tbl_merchants_type mt where mt.stationed_user_id = sui.id) as merchants_type_id
		from tbl_stationed_user_info sui
		<where>
			stationed_user_type = '2'
			and exists(select 1 from tbl_merchants_type mt where mt.stationed_user_id = sui.id and mt.merchants_type=4)
			<if test="user_name !=null and user_name !='' ">
				and user_name like concat(concat('%', #{user_name,jdbcType=VARCHAR}),'%')
			</if>
			<if test="company_name !=null and company_name !=''">
				and company_name like concat(concat('%', #{company_name,jdbcType=VARCHAR}),'%')
			</if>
			<if test="contact_phone_number !=null and contact_phone_number !=''">
				and contact_phone_number = #{contact_phone_number,jdbcType=VARCHAR}
			</if>
			<if test="state != null">
				and state in
                <foreach item="item" collection="state" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="is_open_shop != null and is_open_shop != ''">
				and is_open_shop = #{is_open_shop,jdbcType=INTEGER}
			</if>
		</where>
		order by create_date desc) a
		where rownum &lt;= #{end_rownum,jdbcType=INTEGER})
		where rn &gt; #{start_rownum,jdbcType=INTEGER}
	</select>
	
	<!--查询私有平台商家列表数量 -->
	<select id="queryPvtpStationedCount" parameterType="java.util.Map" resultType="int">
		    select count(1)
		from tbl_stationed_user_info sui
		<where>
			stationed_user_type = '2'
			and exists(select 1 from tbl_merchants_type mt where mt.stationed_user_id = sui.id and mt.merchants_type=4)
			<if test="user_name !=null and user_name !='' ">
				and user_name like concat(concat('%', #{user_name,jdbcType=VARCHAR}),'%')
			</if>
			<if test="company_name !=null and company_name !=''">
				and company_name like concat(concat('%', #{company_name,jdbcType=VARCHAR}),'%')
			</if>
			<if test="contact_phone_number !=null and contact_phone_number !=''">
				and contact_phone_number = #{contact_phone_number,jdbcType=VARCHAR}
			</if>
			<if test="contact_phone_number !=null and contact_phone_number !=''">
				and contact_phone_number = #{contact_phone_number,jdbcType=VARCHAR}
			</if>
			<if test="state != null">
				and state in
                <foreach item="item" collection="state" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="is_open_shop != null and is_open_shop != ''">
				and is_open_shop = #{is_open_shop,jdbcType=INTEGER}
			</if>
		</where>
	</select>

	<!-- 入驻商详情  -->
	<select id="queryStationedDetail" parameterType="java.util.Map" resultType="java.util.Map">
		select <include refid="i_colum"/>,
		       (select to_char(wm_concat(merchants_type)) from tbl_merchants_type mt where mt.stationed_user_id = tsua.id) as merchants_type
		  from tbl_stationed_user_info tsua
		 where id = #{id,jdbcType=INTEGER}
	</select>

	<!-- 查询入驻商-私有商家相关服务费详情-->
	<select id="queryStationedServiceRateDetail" parameterType="java.util.Map" resultType="java.util.Map">
		select nvl(service_charges,0)*100 service_charges,
			   nvl(member_service_rate,0)*100 member_service_rate,
			   nvl(pay_service_rate,0)*100 pay_service_rate,
			   nvl(area_service_rate,0)*100 area_service_rate,
			   nvl(user_discount,0)*100 user_discount,
			   df_template_id
		  from tbl_pvtp_config tpc
		 where stationed_user_id = #{id,jdbcType=INTEGER}
	</select>

	<!-- 入驻商-私有商家相关费用更新 -->
	<update id="updateStationedServiceRate" parameterType="java.util.Map">
		update tbl_pvtp_config
		<set>
			<if test="service_charges !=null"> service_charges = #{service_charges,jdbcType=DOUBLE},</if>
			<if test="member_service_rate !=null"> member_service_rate = #{member_service_rate,jdbcType=DOUBLE},</if>
			<if test="pay_service_rate !=null"> pay_service_rate = #{pay_service_rate,jdbcType=DOUBLE},</if>
			<if test="area_service_rate !=null"> area_service_rate = #{area_service_rate,jdbcType=DOUBLE},</if>
			<if test="user_discount !=null"> user_discount = #{user_discount,jdbcType=DOUBLE},</if>
			<if test="df_template_id !=null"> df_template_id = #{df_template_id,jdbcType=INTEGER}</if>
		</set>
		where stationed_user_id = #{id,jdbcType=INTEGER}
	</update>

	<!-- 批量更新或 插入入驻商-私有商家仓储费设置-->
    <update id="updateOrInsertStorageCharges" parameterType="java.util.List">
        merge into tbl_pvtp_stat_storage_charges tssc
        using (
        <foreach collection="list" item="item" index="index" separator=" UNION ALL ">
            select
            #{item.stationed_user_id, jdbcType=INTEGER} stationed_user_id,
            #{item.product_size, jdbcType=VARCHAR} product_size,
            #{item.storage_charges, jdbcType=INTEGER} storage_charges,
            #{item.create_user_id, jdbcType=VARCHAR} create_user_id,
            #{item.type, jdbcType=CHAR} type
            from dual
        </foreach>
        ) ps
        on (tssc.stationed_user_id = ps.stationed_user_id
        	and tssc.product_size = ps.product_size
        	and tssc.type = ps.type)
        when matched then
        update set tssc.storage_charges=ps.storage_charges
        when not matched then
        insert (
            stationed_user_id,
			product_size,
			storage_charges,
			create_user_id,
			create_date,
			type
        ) values (
            ps.stationed_user_id,
            ps.product_size,
            ps.storage_charges,
            ps.create_user_id,
            sysdate,
            ps.type
        )
    </update>

    <!-- 查询入驻商关联的商品尺码对应的仓储费 -->
	<select id="queryStorageChargesList" parameterType="java.util.Map" resultType="java.util.Map">
		select '1' type,
		       a.product_size,
               nvl (b.storage_charges, 0) storage_charges
		  from (select product_size
		          from tbl_dic_product_size
		         where type=#{code,jdbcType=CHAR}) a
			   left join tbl_pvtp_stat_storage_charges b
		       on a.product_size = b.product_size and b.stationed_user_id = #{id,jdbcType=INTEGER}
		order by product_size
	</select>

	<!-- 查询入驻商关联的分类对应的仓储费(其他分类) -->
	<select id="queryStorageChargesTypeList" parameterType="java.util.Map" resultType="java.util.Map">
		select temp.type ,
		 	   temp.id,
		 	   temp.type_name,
		 	   temp.parent_id,
		 	   nvl(temp2.storage_charges, 0) storage_charges
		  from tbl_dic_product_type temp left join tbl_pvtp_stat_storage_charges temp2
		       on temp.id = temp2.product_size and temp2.stationed_user_id = #{id,jdbcType=INTEGER}
		 where temp.type = #{type,jdbcType=CHAR}
		 start with temp.parent_id = #{parent_id,jdbcType=INTEGER}
		 connect by prior temp.id = temp.parent_id
	</select>

	<!-- 保证金配置 -->
    <update id="editDepositMoney" parameterType="java.util.Map">
    	update tbl_pvtp_bank_account
    	   set deposit_money =  #{deposit_money,jdbcType=INTEGER}
    	 where user_id = #{id,jdbcType=INTEGER}
    </update>

    <!-- 查询保证金 -->
    <select id="queryDepositMoney" parameterType="java.util.Map" resultType="string">
    	select deposit_money
    	  from tbl_pvtp_bank_account
    	 where user_id = #{id,jdbcType=INTEGER}
    </select>

    <!-- 查询入驻商-私有商家账户信息 -->
	<select id="queryBankAccountInfo" parameterType="java.util.Map" resultType="java.util.Map">
		select id,
			nvl(account_balance,0) account_balance,
			account_balance_checkcode,
			nvl(deposit_money,0) deposit_money,
			nvl(deposit_money_balance,0) deposit_money_balance,
			deposit_checkcode
		from tbl_pvtp_bank_account
		where user_id = #{user_id,jdbcType=INTEGER}
	</select>

	<!-- 入驻商-私有商家更新 -->
	<update id="updatePvtpStationed" parameterType="java.util.Map">
		update tbl_stationed_user_info
		<set>
			<if test="is_approval_order != null and is_approval_order != ''">
				is_approval_order = #{is_approval_order,jdbcType=INTEGER}
			</if>
		</set>
		 where id = #{id,jdbcType=INTEGER}
    </update>

    <!-- 用户操作日志记录 -->
    <insert id="insertUserOperationLog"  parameterType="java.util.Map">
         INSERT INTO TBL_USER_OPERATION_LOG(
             ID,
             USER_TYPE,
             OPERATE_ID,
             CREATE_USER_ID,
             CREATE_DATE,
             REMARK,
             USER_NAME,
             USER_REALNAME
         ) VALUES
         (
             SEQ_USER_OPERATION_LOG.NEXTVAL,
             #{USER_TYPE,jdbcType=INTEGER},
             #{OPERATE_ID,jdbcType=INTEGER},
             #{CREATE_USER_ID,jdbcType=INTEGER},
             sysdate,
             #{REMARK,jdbcType=VARCHAR},
             #{USER_NAME,jdbcType=VARCHAR},
             #{USER_REALNAME,jdbcType=VARCHAR}
        )
    </insert>
    <!-- 入驻商收支记录数量 -->
    <select id="queryInExpRecordCount" parameterType="java.util.Map" resultType="int">
    	select count(1)
    	  from tbl_stationed_in_exp_record
    	 <where>
    	     	account_flag = 1
    	 	<if test="stationed_user_id !=null and stationed_user_id !=''">
    	 		and stationed_user_id = #{stationed_user_id,jdbcType=INTEGER}
    	 	</if>
    	 	<if test="record_number !=null and record_number !=''">
    	 		and record_number = #{record_number,jdbcType=VARCHAR}
    	 	</if>
    	 	<if test="record_type !=null and record_type !=''">
    	 		and record_type = #{record_type,jdbcType=VARCHAR}
    	 	</if>
    	 	<if test="turnover_type !=null and turnover_type !=''">
    	 		and turnover_type = #{turnover_type,jdbcType=VARCHAR}
    	 	</if>
    	 	<if test="turnover_number !=null and turnover_number !=''">
    	 		and turnover_number = #{turnover_number,jdbcType=VARCHAR}
    	 	</if>
    	 	<if test="start_create_date != null and start_create_date != ''">
				and to_char(create_date,'YYYY-MM-DD HH24:MI:SS') &gt;= #{start_create_date,jdbcType=VARCHAR}
			</if>
			<if test="end_create_date != null and end_create_date != ''">
				and to_char(create_date,'YYYY-MM-DD HH24:MI:SS') &lt;= #{end_create_date,jdbcType=VARCHAR}
			</if>
		    <if test="record_channel != null and record_channel != ''">
			    and record_channel = #{record_channel,jdbcType=VARCHAR}
		    </if>
		</where>
    </select>
    <!-- 入驻商收支记录列表 -->
    <select id="queryInExpRecordList" parameterType="java.util.Map" resultType="java.util.Map">
	    select * from (
			select a.*, rownum rn from(
				select id,
		    		   (select company_name from tbl_stationed_user_info where id = ir.stationed_user_id) as stationed_name,
		    		   record_number,
		    		   record_type,
		    		   remark,
		    		   nvl(money,0) money,
		    		   nvl(surplus_money,0) surplus_money,
		    		   turnover_type,
		    		   turnover_number,
		    		   to_char(create_date,'yyyy-mm-dd hh24:mi:ss') create_date
		    	  from tbl_stationed_in_exp_record ir
		    	 <where>
		    	 	    account_flag = 1
		    	 	<if test="stationed_user_id !=null and stationed_user_id !=''">
		    	 		and stationed_user_id = #{stationed_user_id,jdbcType=INTEGER}
		    	 	</if>
		    	 	<if test="record_number !=null and record_number !=''">
		    	 		and record_number = #{record_number,jdbcType=VARCHAR}
		    	 	</if>
		    	 	<if test="record_type !=null and record_type !=''">
		    	 		and record_type = #{record_type,jdbcType=VARCHAR}
		    	 	</if>
		    	 	<if test="turnover_type !=null and turnover_type !=''">
		    	 		and turnover_type = #{turnover_type,jdbcType=VARCHAR}
		    	 	</if>
		    	 	<if test="turnover_number !=null and turnover_number !=''">
		    	 		and turnover_number = #{turnover_number,jdbcType=VARCHAR}
		    	 	</if>
		    	 	<if test="start_create_date != null and start_create_date != ''">
						and to_char(create_date,'YYYY-MM-DD HH24:MI:SS') &gt;= #{start_create_date,jdbcType=VARCHAR}
					</if>
					<if test="end_create_date != null and end_create_date != ''">
						and to_char(create_date,'YYYY-MM-DD HH24:MI:SS') &lt;= #{end_create_date,jdbcType=VARCHAR}
					</if>
					 <if test="record_channel != null and record_channel != ''">
						 and record_channel = #{record_channel,jdbcType=VARCHAR}
					 </if>
    	 		</where>
    	 			order by create_date desc) a
				where rownum &lt;= #{end_rownum,jdbcType=INTEGER})
			where rn &gt; #{start_rownum,jdbcType=INTEGER}
    </select>

	<!-- 校验保证金余额校验码 -->
	<select id="queryCheckDepositBalance" parameterType="java.util.Map" resultType="int">
        select count(1)
          from tbl_pvtp_bank_account
         where deposit_checkcode = getcheck_code(user_id,deposit_money_balance,getUserKey(user_id,'old','8'))
           and user_id = #{user_id,jdbcType=INTEGER}
    </select>

	<!-- 更新私有商家保证金余额信息 -->
	<update id="updateDepositMoneyBalanceInfo" parameterType="java.util.Map">
		update tbl_pvtp_bank_account
		   set deposit_money_balance = #{deposit_money_balance,jdbcType=INTEGER}
         where user_id = #{user_id,jdbcType=INTEGER}
	</update>

	<!-- 更新用户账户校验码 -->
	<update id="updateUserAccountCheckCode" parameterType="java.util.Map">
        <![CDATA[
			call PVTP_UPDATE_USER_ACCOUNT_CODE(#{user_id,mode=IN,jdbcType=VARCHAR})
			]]>
    </update>

	<!-- 校验余额校验码 -->
	<select id="queryCheckAccountBalance" parameterType="java.util.Map" resultType="int">
        select count(1)
          from tbl_pvtp_bank_account
         where account_balance_checkcode = getcheck_code(user_id,account_balance,getUserKey(user_id,'old','8'))
           and user_id = #{user_id, jdbcType=INTEGER}
    </select>

	<!-- 更新入驻商余额信息 -->
	<update id="updateAccountBalanceInfo" parameterType="java.util.Map">
		update tbl_pvtp_bank_account
		   set account_balance = #{account_balance,jdbcType=INTEGER}
         where user_id = #{user_id,jdbcType=INTEGER}
	</update>
	<!--修改用户帐户余额 -->
	<select id="updateStationedAccountBalance" statementType="CALLABLE" parameterType="java.util.Map">
		<![CDATA[
			call UPDATE_PVTP_ACCOUNT_BALANCE(
			#{user_id,jdbcType=INTEGER},
			#{money,jdbcType=FLOAT},
			#{output_status,mode=OUT,jdbcType=VARCHAR},
			#{output_msg,mode=OUT,jdbcType=VARCHAR})
			]]>
	</select>
	<!-- 根据私有商用户ID获取账号信息 -->
	<select id="queryBankAccountById" parameterType="long" resultType="java.util.Map">
       select
            id,
		    user_id,
		    bank_account,
		    nvl(account_balance,0) account_balance,
		    create_date,
		    nvl(deposit_money,0) deposit_money,
		    nvl(deposit_money_balance,0) deposit_money_balance
        from
            TBL_PVTP_BANK_ACCOUNT
        where user_id = #{stationed_user_id,jdbcType=BIGINT}
    </select>
	<!-- 统计私有商家的待结算金额 -->
	<select id="queryWaitSettlementAmount" parameterType="long" resultType="java.util.Map">
    	SELECT nvl(sum(case when settlement_amount <![CDATA[ > ]]> settled_amount then settlement_amount - settled_amount else 0 end), 0) unliquidated_balance
  		FROM TBL_BUSS_SETTLEMENT_INFO
 		WHERE SETTLEMENT_STATE != 2
        AND BANK_ACCOUNT_TYPE = 1
        AND IS_DELETE = '0'
        AND settlement_type = '1'
        and is_private = 1
        AND SETTLEMENT_USER_ID = #{stationed_user_id,jdbcType=INTEGER}
    </select>
</mapper>

