package com.tk.oms.member.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.tk.oms.basicinfo.dao.StoreInfoDao;
import com.tk.oms.member.dao.MemberInfoDao;
import com.tk.oms.member.dao.RetailStoreApprovalDao;
import com.tk.sys.config.EsbConfig;
import com.tk.sys.util.GridResult;
import com.tk.sys.util.HttpClientUtil;
import com.tk.sys.util.HttpUtil;
import com.tk.sys.util.Jackson;
import com.tk.sys.util.Packet;
import com.tk.sys.util.PageUtil;
import com.tk.sys.util.ProcessResult;
import com.tk.sys.util.Transform;

/**
*
* Copyright (c), 2019, Tongku
* FileName : StoreApprovalControl
* 店铺审核
*
* @author liujialong
* @version 1.00
* @date 2019/6/26
*/
@Service
public class RetailStoreApprovalService {
	
	private Log logger = LogFactory.getLog(this.getClass());
	
	@Resource
    private RetailStoreApprovalDao retailStoreApprovalDao;
	@Resource
	private MemberInfoDao memberInfoDao;
	@Resource
	private StoreInfoDao storeInfoDao;
	
	@Value("${retail_service_new_url}")
    private String retail_service_new_url;
	
	@Value("${sms_service_url}")
    private String sms_service_url;
	
	/**
     * 分页查询店铺审核列表
     * @param request 查询条件
     * @return
     */
    public GridResult queryStoreApprovalList(HttpServletRequest request) {
        GridResult gr = new GridResult();
        try {
            // 获取传入参数
            String json = HttpUtil.getRequestInputStream(request);
            // 解析传入参数
            Map<String, Object> paramMap = (HashMap<String, Object>) Transform.GetPacket(json, HashMap.class);
            //分页参数
            GridResult pageParamResult = PageUtil.handlePageParams(paramMap);
            if (pageParamResult != null) {
                return pageParamResult;
            }
            //查询用户充值申请记录数
            int count = retailStoreApprovalDao.queryStoreApprovalCount(paramMap);
            //分页查询用户充值申请记录
            List<Map<String, Object>> list = retailStoreApprovalDao.queryStoreApprovalList(paramMap);
            if (list != null) {
                gr.setMessage("获取成功");
                gr.setObj(list);
                gr.setTotal(count);
            } else {
                gr.setMessage("无数据");
            }
            gr.setState(true);
        } catch (Exception e) {
            gr.setState(false);
            gr.setMessage(e.getMessage());
            logger.error(e.getMessage());
        }
        return gr;
    }
    
    /**
     * 店铺审核详情
     * @param request
     * @return
     */
    public ProcessResult queryStoreApprovalDetail(HttpServletRequest request) {
        ProcessResult pr = new ProcessResult();
        try {
            //获取参数
            String json = HttpUtil.getRequestInputStream(request);
            Map<String, Object> params = (Map<String, Object>) Transform.GetPacket(json, Map.class);
            //判断是否缺少参数
            if (StringUtils.isEmpty(params.get("id"))) {
                pr.setState(false);
                pr.setMessage("缺少参数[id]申请编号");
                return pr;
            }
            //获取现金预充值审批明细
            Map<String, Object> result = this.retailStoreApprovalDao.queryStoreApprovalDetail(params);
            if (result != null) {
                pr.setState(true);
                pr.setMessage("获取成功");
                pr.setObj(result);
            } else {
                pr.setState(false);
                pr.setMessage("获取失败");
            }
        } catch (Exception e) {
            pr.setState(false);
            pr.setMessage(e.getMessage());
            logger.error(e.getMessage());
        }
        return pr;
    }
    
    
    /**
     * 店铺审核编辑详情
     * @param request
     * @return
     */
    public ProcessResult queryRetailStoreApprovalUserInfoDetail(HttpServletRequest request) {
        ProcessResult pr = new ProcessResult();
        try {
            //获取参数
            String json = HttpUtil.getRequestInputStream(request);
            Map<String, Object> params = (Map<String, Object>) Transform.GetPacket(json, Map.class);
            //判断是否缺少参数
            if (StringUtils.isEmpty(params.get("id"))) {
                pr.setState(false);
                pr.setMessage("缺少参数[id]申请编号");
                return pr;
            }
            //获取现金预充值审批明细
            Map<String, Object> result = this.retailStoreApprovalDao.queryRetailStoreApprovalUserInfoDetail(params);
            if (result != null) {
                pr.setMessage("获取成功");
                pr.setObj(result);
            } else {
                pr.setMessage("无数据");
            }
            pr.setState(true);
        } catch (Exception e) {
            pr.setState(false);
            pr.setMessage(e.getMessage());
            logger.error(e.getMessage());
        }
        return pr;
    }
    
    /**
     * 店铺编辑
     * @param request
     * @return
     */
    @Transactional
    public ProcessResult editRetailStoreApprovalUserInfo(HttpServletRequest request) throws Exception {
        ProcessResult pr = new ProcessResult();
        try {
            //获取请求参数
            String json = HttpUtil.getRequestInputStream(request);
            if (StringUtils.isEmpty(json)) {
                pr.setState(false);
                pr.setMessage("缺少请求参数");
                return pr;
            }
            Map<String, Object> params = (Map<String, Object>) Transform.GetPacket(json, Map.class);
            if (StringUtils.isEmpty(params.get("user_id"))) {
                pr.setState(false);
                pr.setMessage("缺少参数user_id");
                return pr;
            }
            
            int count=retailStoreApprovalDao.updateUserInfo(params);
            if(count<=0){
            	pr.setState(false);
            	throw new RuntimeException("修改失败");
            }
            retailStoreApprovalDao.updateRetailUserInfo(params);
            Map<String, Object> sendMap = new HashMap<String, Object>();
            sendMap.put("AGENT_ID", params.get("user_id"));
            sendMap.put("SHOP_NAME", params.get("SHOP_NAME"));
            sendMap.put("PF_NAME", params.get("USER_MANAGE_NAME"));
            sendMap.put("MOBILE", params.get("USER_MANAGE_MOBILEPHONE"));
            sendMap.put("USER_MANAGE_CARDID", params.get("USER_MANAGE_CARDID"));
            sendMap.put("USER_MANAGE_CARDID_FILE", params.get("USER_MANAGE_CARDID_FILE1"));
            Map<String, Object> resPr = (Map<String, Object>) this.queryForPost(sendMap, retail_service_new_url+"open/Agent/agentInfoUpdate");
            if (Integer.parseInt(resPr.get("state").toString()) == 1) {
            	pr.setState(true);
                pr.setMessage("编辑成功");
            }
        } catch (Exception e) {
            logger.error(e.getMessage());
            throw new RuntimeException(e.getMessage());
        }
        return pr;
    }
    
    /**
     * 用户信息审核
     * @param request
     * @return
     */
    @Transactional
    public ProcessResult auditUserStoreApproval(HttpServletRequest request) throws Exception {
        ProcessResult pr = new ProcessResult();
        try {
            //获取请求参数
            String json = HttpUtil.getRequestInputStream(request);
            if (StringUtils.isEmpty(json)) {
                pr.setState(false);
                pr.setMessage("缺少请求参数");
                return pr;
            }
            Map<String, Object> params = (Map<String, Object>) Transform.GetPacket(json, Map.class);
            if (StringUtils.isEmpty(params.get("retail_user_id"))) {
                pr.setState(false);
                pr.setMessage("缺少参数retail_user_id");
                return pr;
            }
            if (StringUtils.isEmpty(params.get("user_approval_state"))) {
                pr.setState(false);
                pr.setMessage("缺少参数user_approval_state");
                return pr;
            }
            if(Integer.parseInt(params.get("user_approval_state")+"")==2){
            	//获取业务员名称
    			String  referee_user_realname="";
    			if(!StringUtils.isEmpty(params.get("referee_user_id"))){
    				referee_user_realname=memberInfoDao.querySysUserInfoById(Integer.parseInt(params.get("referee_user_id").toString()));
    			}
    			//获取门店名称
    			String  store_name="";
    			if(!StringUtils.isEmpty(params.get("store_id"))){
    				 store_name=storeInfoDao.queryStoreNameById(Integer.parseInt(params.get("store_id").toString()));
    			}
    			//获取业务经理名称
    			String market_supervision_user_realna=memberInfoDao.querySysUserInfoById(Integer.parseInt(params.get("market_supervision_user_id").toString()));
    			params.put("referee_user_realname", referee_user_realname);
    			params.put("market_supervision_user_realna", market_supervision_user_realna);
    			params.put("store_name", store_name);
            	//审核通过修改状态
            	retailStoreApprovalDao.auditUserStoreApproval(params);
            	//初始化临时表会员数据
            	retailStoreApprovalDao.insertUserInfoApply(params);
            	//审核通过成为正式会员
            	retailStoreApprovalDao.insertUserInfo(params);
            	//创建用户帐户信息
				addUserAccount(params);
            }else{
            	//审核驳回
            	retailStoreApprovalDao.auditUserStoreApproval(params);
            }
            Map<String, Object> sendMap = new HashMap<String, Object>();
            sendMap.put("AGENT_ID", params.get("retail_user_id"));
            sendMap.put("USER_APPROVAL_STATE", params.get("user_approval_state"));
            Map<String, Object> resPr = (Map<String, Object>) this.queryForPost(sendMap, retail_service_new_url+"open/Agent/agentInfoUpdate");
            if (Integer.parseInt(resPr.get("state").toString()) == 1) {
            	pr.setState(true);
                pr.setMessage("审批成功");
                try{
                	//相关信息获取
	            	params.put("id", params.get("retail_user_id"));
	            	Map<String, Object> param = new HashMap<String, Object>();
	            	Map<String, Object> detail=retailStoreApprovalDao.queryStoreApprovalDetail(params);
	            	param.put("verify_state", params.get("user_approval_state"));
	            	param.put("verfiy_time", detail.get("APPROVAL_DATE"));
	            	//短信提醒参数封装
	            	Map<String, Object> noticeMap = new HashMap<String, Object>();
	            	noticeMap.put("param", param);
	            	noticeMap.put("type", 21);
	            	noticeMap.put("mobile",detail.get("USER_MOBILEPHONE"));
	            	noticeMap.put("sms_key","");
	            	if(detail.containsKey("OPENID") && !StringUtils.isEmpty(detail.get("OPENID"))){
	            		noticeMap.put("openid",detail.get("USER_MOBILEPHONE"));
	            	}else{
	            		noticeMap.put("openid","");
	            	}
	            	//调用远程接口
	            	ProcessResult sendPr = (ProcessResult)this.queryForPostSendNotice(noticeMap, sms_service_url);
	            	if (sendPr.getState()) {
	            		logger.info("新零售社交账号("+params.get("id")+")审批时调用远程接口发送提醒信息成功");
	            	}else{
	            		logger.info("新零售社交账号("+params.get("id")+")审批时调用远程接口发送提醒信息失败:"+sendPr.getMessage());
	            	}
            	}catch(Exception e){
            		logger.error("新零售社交账号("+params.get("id")+")审批时消息提醒异常"+e.getMessage());
            	}
            }else{
            	pr.setMessage("调用远程接口异常");
            	throw new RuntimeException("调用远程接口异常");
            }
        } catch (Exception e) {
            logger.error(e.getMessage());
            throw new RuntimeException(e.getMessage());
        }
        return pr;
    }
    public Object queryForPost(Map<String,Object> obj,String url) throws Exception{
        String params = "";
        if(obj != null){
            Packet packet = Transform.GetResult(obj, EsbConfig.ERP_FORWARD_KEY_NAME);//加密数据
            params = Jackson.writeObject2Json(packet);//对象转json、字符串
        }
        //发送至服务端
        String json = HttpClientUtil.post(url, params,30000);
        return Transform.GetPacketJzb(json,Map.class);
    }
    
    public Object queryForPostSendNotice(Map<String,Object> obj,String url) throws Exception{
        String params = "";
        if(obj != null){
            Packet packet = Transform.GetResult(obj,EsbConfig.ERP_FORWARD_KEY_NAME);//加密数据
            params = Jackson.writeObject2Json(packet);//对象转json、字符串
        }
        //发送至服务端(设置3秒超时时间)
        String json = HttpClientUtil.post(url, params,3000);
        return  Transform.GetPacket(json,ProcessResult.class,EsbConfig.ERP_REVERSE_KEY_NAME);
	}
 
    
    /**
   	 * 审核通过，添加用户帐户
   	 * @param user
   	 * @return
        */
   	@Transactional
   	private int addUserAccount(Map<String, Object> user) throws Exception{
   		user.put("user_name", user.get("retail_user_id"));
   		
   		//创建用户账户信息
   		Map<String,Object> codeParams = new HashMap<String,Object>();
   		codeParams.put("c_user_name",user.get("retail_user_id"));
   		codeParams.put("c_money",0);
   		codeParams.put("c_typeid","new");
   		codeParams.put("c_user_type","1");
   		String key = memberInfoDao.getUserKey(codeParams);
   		codeParams.put("c_user_key",key);
   		String code = memberInfoDao.getCheck_Code(codeParams);
   		Map<String,Object> account = new HashMap<String,Object>();
   		account.put("user_id", user.get("retail_user_id"));
   		account.put("account_balance_checkcode", code);//余额校验码
   		account.put("credit_checkcode", code);//授信校验码
   		account.put("bank_account", "");
   		account.put("sub_merchant_id", "");
   		account.put("user_type", "1");
   		account.put("credit_money", 0);
   		account.put("credit_money_use", 0);
   		account.put("credit_money_balance", 0);
   		account.put("deposit_money", 0);
   		account.put("account_balance", 0);
   		account.put("score", 6001);

   		//保存用户key
   		Map<String,Object> uck = new HashMap<String,Object>();
   		uck.put("user_name", user.get("retail_user_id"));
   		uck.put("cache_key", key);
   		if(memberInfoDao.insertCacheKey(uck)>0){
   			return memberInfoDao.insertBankAccount(account);
   		}
   		return 0;
   	}

}
