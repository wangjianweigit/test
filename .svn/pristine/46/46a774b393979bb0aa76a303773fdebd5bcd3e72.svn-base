package com.tk.oms.finance.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.tk.oms.finance.dao.RetailExtractDao;
import com.tk.sys.util.GridResult;
import com.tk.sys.util.HttpClientUtil;
import com.tk.sys.util.HttpUtil;
import com.tk.sys.util.PageUtil;
import com.tk.sys.util.ProcessResult;
import com.tk.sys.util.Transform;
/**
 * 新零售商家提现申请管理
 * @author shif
 * @date  20191023
 */
@Service("RetailExtractService")
public class RetailExtractService {

	@Value("${retail_service_new_url}")
    private String retail_service_new_url;//新零售系统服务
	@Value("${retail_extract_approval}")
	private String retail_extract_approval;//新零售商家提现审批
	
	@Resource
	private RetailExtractDao retailExtractDao;
	/**
     * 分页获取新零售商家提现申请记录列表
     * @param request
     * @return
     */
    @SuppressWarnings("unchecked")
	public GridResult queryRetailExtractList(HttpServletRequest request) {
        GridResult gr = new GridResult();
        try {
            String json = HttpUtil.getRequestInputStream(request);
            if (StringUtils.isEmpty(json)) {
                gr.setState(false);
                gr.setMessage("缺少参数");
                return gr;
            }
            Map<String, Object> params = (Map<String, Object>) Transform.GetPacket(json, Map.class);
            GridResult pageParamResult = PageUtil.handlePageParams(params);
            if (pageParamResult != null) {
                return pageParamResult;
            }
            List<String> state_list = null;
			if(params.get("state") instanceof List<?>){
				state_list = (List<String>) params.get("state");
			}else if(params.get("state") instanceof String){
				state_list = new ArrayList<String>();
				state_list.add(params.get("state").toString());
			}
			params.put("state", state_list);
            int total = this.retailExtractDao.queryListForCount(params);
            List<Map<String, Object>> list = this.retailExtractDao.queryListForPage(params);
            if (list != null && list.size() > 0) {
                gr.setMessage("获取新零售商家提现申请记录成功");
                gr.setObj(list);
            } else {
                gr.setMessage("无数据");
            }
            gr.setState(true);
            gr.setTotal(total);
        } catch (Exception ex) {
            gr.setState(false);
            gr.setMessage(ex.getMessage());
            ex.printStackTrace();
        }
        return gr;
    }
    /**
     * 根据ID获取待新零售商家提现申请记录详情
     * @param request
     * @return
     */
    @SuppressWarnings("unchecked")
    public ProcessResult queryRetailExtractDetail(HttpServletRequest request) {
    	ProcessResult pr = new ProcessResult();
    	try {
    		String json = HttpUtil.getRequestInputStream(request);
    		if (StringUtils.isEmpty(json)) {
    			pr.setState(false);
    			pr.setMessage("缺少参数");
    			return pr;
    		}
    		Map<String, Object> params = (Map<String, Object>) Transform.GetPacket(json, Map.class);
    		if(params == null
    				||params.isEmpty()
    				||StringUtils.isEmpty(params.get("id"))){
    			pr.setState(false);
    			pr.setMessage("缺少参数[ID]");
    			return pr;
    		}
    		Map<String, Object> applyObj = this.retailExtractDao.queryById(Long.parseLong(params.get("id").toString()));
    		if(applyObj == null || applyObj.isEmpty()){
    			pr.setState(false);
    			pr.setMessage("当前申请记录不存在或已被删除");
    			return pr;
    		}
    		pr.setState(true);
    		pr.setMessage("获取申请记录成功");
    		pr.setObj(applyObj);
    		return pr;
    	} catch (Exception ex) {
    		pr.setState(false);
    		pr.setMessage(ex.getMessage());
    		ex.printStackTrace();
    	}
    	return pr;
    }
    /**
     * 审批新零售商家提现申请记录
     * @param request
     * @return
     */
    @SuppressWarnings("unchecked")
    @Transactional
    public ProcessResult approvalRetailExtract(HttpServletRequest request) throws Exception{
    	ProcessResult gr = new ProcessResult();
		String json = HttpUtil.getRequestInputStream(request);
		if (StringUtils.isEmpty(json)) {
			gr.setState(false);
			gr.setMessage("缺少参数");
			return gr;
		}
		Map<String, Object> params = (Map<String, Object>) Transform.GetPacket(json, Map.class);
		if(params == null || params.isEmpty() || StringUtils.isEmpty(params.get("id")) || StringUtils.isEmpty(params.get("state"))){
			gr.setState(false);
			gr.setMessage("缺少参数");
			return gr;
		}
		Map<String, Object> applyObj = this.retailExtractDao.queryById(Long.parseLong(params.get("id").toString()));
		if(applyObj == null || applyObj.isEmpty()){
			gr.setState(false);
			gr.setMessage("当前申请记录不存在或已被删除");
			return gr;
		}

		// 交易申请记录当前状态
		if(!"1".equals(String.valueOf(applyObj.get("STATE")))){
			gr.setState(false);
			gr.setMessage("记录已审批，请勿重复操作");
			return gr;
		}

		if("10".equals(params.get("state").toString())){
			if(StringUtils.isEmpty(params.get("reject_reason"))){
				gr.setState(false);
    			gr.setMessage("审批驳回必须输入驳回原因");
    			return gr;
			}
			if (retailExtractDao.approval(params)>0) {
				gr.setState(true);
				gr.setMessage("审批驳回成功");
			} else {
				gr.setState(false);
				gr.setMessage("审批驳回失败");
			}
		}else if("2".equals(params.get("state").toString())){
			if (retailExtractDao.approval(params)>0) {
				gr.setState(true);
				gr.setMessage("审批通过成功");
			} else {
				gr.setState(false);
				gr.setMessage("审批通过失败");
			}
		}
    	return gr;
    }
    
    
    /**
     *  新零售商家提现申请打款
     * @param request
     * @return
     */
    @SuppressWarnings("unchecked")
    public ProcessResult payRetailExtract(HttpServletRequest request) throws Exception{
    	ProcessResult pr = new ProcessResult();
		String json = HttpUtil.getRequestInputStream(request);
		if (StringUtils.isEmpty(json)) {
			pr.setState(false);
			pr.setMessage("缺少参数");
			return pr;
		}
		Map<String, Object> params = (Map<String, Object>) Transform.GetPacket(json, Map.class);
		if(params == null || params.isEmpty() || StringUtils.isEmpty(params.get("id"))){
			pr.setState(false);
			pr.setMessage("缺少参数");
			return pr;
		}
		if(!params.containsKey("voucher_img_url") && StringUtils.isEmpty(params.get("voucher_img_url").toString())) {
			pr.setState(false);
			pr.setMessage("请上传打款凭证");
			return pr;
		}
		Map<String, Object> applyObj = this.retailExtractDao.queryById(Long.parseLong(params.get("id").toString()));
		if(applyObj == null || applyObj.isEmpty()){
			pr.setState(false);
			pr.setMessage("当前申请记录不存在或已被删除");
			return pr;
		}
		// 交易申请记录当前状态
		if(!"2".equals(String.valueOf(applyObj.get("STATE")))){
			pr.setState(false);
			pr.setMessage("记录已打款，请勿重复操作");
			return pr;
		}
		params.put("state","4");//打款成功，待银行处理
		if(retailExtractDao.pay(params)>0) {
			Map<String, Object> bank_param = new HashMap<String, Object>();
			//远程调用新零售接口
			pr = HttpClientUtil.post(retail_service_new_url + retail_extract_approval, bank_param);
			if(pr.getState()){
				pr.setState(true);
				pr.setMessage("打款成功");
				return pr;
			}else{
				throw new RuntimeException("审批通过失败，"+pr.getMessage());
			}
		}
    	return pr;
    }
}
